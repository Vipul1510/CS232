#include "cache.h"

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
   
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    uint32_t way = 0;
    uint32_t min_access_count = block[set][0].freq_no;

    // Find the block with the lowest frequency count
    for (uint32_t i = 1; i < NUM_WAY; i++) {
        if (block[set][i].freq_no < min_access_count) {
            way = i;
            min_access_count = block[set][i].freq_no;
        }
    }

    DP(if (warmup_complete[cpu]) {
        cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
        cout << hex << " address: " << (full_addr >> LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
        cout << dec << " access_count: " << block[set][way].freq_no << endl;
    });

    return way; 
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    // Update access count of the replaced block (this could mean both read/write)

    if(hit){
        block[set][way].freq_no++;
    }
    else {
        block[set][way].freq_no = 1;
    }
    	
    
    

    DP(if (warmup_complete[cpu]) {
        cout << "[" << NAME << "] " << __func__ << " address: " << (full_addr >> LOG2_BLOCK_SIZE) << " access_count: " << block[set][way].freq_no << endl;
    });
}

void CACHE::llc_replacement_final_stats()
{

}
